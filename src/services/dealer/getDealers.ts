import { Dealer } from "../../models/Dealer";
import { sequelize } from "../../models";
import { copyFile } from "fs";
import { Logger } from "../../utils/logger2";

const logger = new Logger("telegram_bot");

export const prodBot = "7037383166:AAEVorrD1oFmGfR7PRHyvmNhnBy3IVv8tS4";
export const testBot = "6708220727:AAGfVxcx6lYVbSkEokgqrmJtCXuq4CDoUNg";

export const helloMessage = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ü§ñüí∞\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n\n–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\"</b> –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å.\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ë–∞–ª–∞–Ω—Å</b>. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É  –º–µ–Ω–µ–¥–∂–µ—Ä—É @KubaQP, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å! üöÄ"

export const getDealerByPhone = async (phone: string, userId: number) => {
  try {
    const sqlQuery = `SELECT id FROM regions WHERE region_phone = '${phone}'`;
    const [results, metadata]: [any[], any] = await sequelize.query(sqlQuery);

    if (results && results.length > 0) {
      logger.log(`Found the dealer by phone ${userId}`);
      setDealer(results[0].id, userId);

      return true;
    } else {
      logger.log(`Couldn't find such a dealer ${userId}`);

      return false;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getDuosDealer:", error);
    throw error; // –ü–µ—Ä–µ–≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –µ–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤—ã–∑—ã–≤–∞—é—â–µ–º—É
  }
};

export const setDealer = async (dealerId: number, telegramId: number) => {
  try {
    logger.log(`---Adding user to bot clients----`);
    const sqlQuery = `
            INSERT INTO bot_clients (region_id, telegram_id)
            VALUES (${dealerId}, ${telegramId})
        `;

    logger.log(`---Check user in bot clients by telegram id ${telegramId}----`);
    const user = await checkUser(telegramId);
    logger.log(`Result founding user in bo_clients: ${user}----`);
    if (!user) {
      logger.log(
        `---User ${dealerId} doesn't exist in bot clients ----\nInsert to bot_clients!`
      );

      await sequelize.query(sqlQuery);
      logger.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É bot_clients");
    }
  } catch (error) {
    logger.log(
      `ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É bot_clients: ${error}`
    );
    throw error; // –ü–µ—Ä–µ–≤—ã–±—Ä–æ—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
  }
};

export const getBalance = async (telegramId: number) => {
  const userDealerId = await getUser(telegramId);
  let message = "";
  if (userDealerId !== null) {
    const dealer = await getDealerById(userDealerId);
    if (dealer !== null) {
      message = `–í–∞—à –±–∞–ª–∞–Ω—Å: <b>${dealer.balance}</b>\n–í–∞—à –∫—Ä–µ–¥–∏—Ç: <b>${dealer.credit}</b>`;
    }
  } else {
    message =
      "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–∑—è—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @KubaQP!";
  }

  return message;
};

export const checkUser = async (telegramId: number) => {
  logger.log("Start checking ...");
  const sqlQuery = `SELECT * FROM bot_clients WHERE telegram_id = ${telegramId}`;

  const [results, metadata] = await sequelize.query(sqlQuery);

  return results.length > 0 ? true : false;
};

export const getUser = async (telegramId: number) => {
  const sqlQuery = `SELECT region_id FROM bot_clients WHERE telegram_id = ${telegramId} LIMIT 1`;

  const [results, metadata]: [any[], any] = await sequelize.query(sqlQuery);

  return results.length > 0 ? results[0].region_id : null;
};

export const getDealerById = async (id: number) => {
  try {
    const sqlQuery = `SELECT balance, credit FROM regions WHERE id = ${id}`;

    const [results, metadata]: [any[], any] = await sequelize.query(sqlQuery);

    return results.length > 0 ? results[0] : null;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ getDuosDealer:", error);
    throw error;
  }
};
